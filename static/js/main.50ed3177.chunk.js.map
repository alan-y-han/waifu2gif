{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleStartTimeChange","event","setState","startTime","target","value","handleEndTimeChange","endTime","handleVResChange","verticalResolution","setMessage","msg","message","newFileAppeared","a","files","file","console","log","name","openedFile","doTranscode","ffmpeg","load","openedFileName","write","run","state","data","read","remove","videoSrc","URL","createObjectURL","Blob","buffer","type","document","getElementById","addEventListener","this","createFFmpeg","className","src","onChange","id","onClick","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"8SAwIeA,G,wDAnIb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAsBRC,sBAAwB,SAACC,GACvB,EAAKC,SAAS,CACZC,UAAWF,EAAMG,OAAOC,SAzBT,EA6BnBC,oBAAsB,SAACL,GACrB,EAAKC,SAAS,CACZK,QAASN,EAAMG,OAAOC,SA/BP,EAmCnBG,iBAAmB,SAACP,GAClB,EAAKC,SAAS,CACZO,mBAAoBR,EAAMG,OAAOC,SArClB,EAyCnBK,WAAa,SAACC,GACZ,EAAKT,SAAS,CACZU,QAASD,KA3CM,EA+CnBE,gBA/CmB,uCA+CD,+BAAAC,EAAA,sDAAmBC,EAAnB,EAASX,OAAUW,MAC7BC,EAAOD,EAAM,GAEnBE,QAAQC,IAAIF,EAAKG,KAAOH,EAAKG,KAAO,kBAEpC,EAAKC,WAAaJ,EALF,2CA/CC,wDAuDnBK,YAvDmB,sBAuDL,8BAAAP,EAAA,yDACP,EAAKM,WADE,uBAEV,EAAKV,WAAW,qBAFN,iCAKZ,EAAKA,WAAW,0BALJ,SAMN,EAAKY,OAAOC,OANN,cAQZ,EAAKb,WAAW,qBAGVc,EAAiB,UAXX,UAaN,EAAKF,OAAOG,MAAMD,EAAgB,EAAKJ,YAbjC,yBAiBN,EAAKE,OAAOI,IAAZ,oBAEE,EAAKC,MAAMxB,UAFb,qBAGE,EAAKwB,MAAMpB,QAHb,oBAICiB,EAJD,8DAOQ,EAAKG,MAAMlB,mBAPnB,6HAjBM,QAmCNmB,EAAO,EAAKN,OAAOO,KAAK,YAC9B,EAAKP,OAAOQ,OAAO,YACnB,EAAK5B,SAAS,CACZ6B,SAAUC,IAAIC,gBACZ,IAAIC,KAAK,CAACN,EAAKO,QAAS,CAAEC,KAAM,iBAGpC,EAAK1B,WAAW,wBA1CJ,4CArDZ,EAAKiB,MAAQ,CACXI,SAAU,GACVnB,QAAS,2BACTT,UAAW,YACXI,QAAS,YACTE,mBAAoB,OAPL,E,gEAYjB4B,SACGC,eAAe,cACfC,iBAAiB,SAAUC,KAAK3B,iBAEnC2B,KAAKlB,OAASmB,uBAAa,CACzBvB,KAAK,IAGPsB,KAAKpB,WAAa,O,+BAiFlB,OACE,yBAAKsB,UAAU,OACb,4BAEA,yBAAKC,IAAKH,KAAKb,MAAMI,WACrB,6BACA,2BACEK,KAAK,OACL/B,MAAOmC,KAAKb,MAAMxB,UAClByC,SAAUJ,KAAKxC,wBAEjB,2BACEoC,KAAK,OACL/B,MAAOmC,KAAKb,MAAMpB,QAClBqC,SAAUJ,KAAKlC,sBAEjB,2BACE8B,KAAK,OACL/B,MAAOmC,KAAKb,MAAMlB,mBAClBmC,SAAUJ,KAAKhC,mBAEjB,6BACA,2BAAO4B,KAAK,OAAOS,GAAG,eACtB,4BAAQC,QAASN,KAAKnB,aAAtB,SACA,2BAAImB,KAAKb,MAAMf,c,GA9HLmC,IAAMC,YCQJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnB,SAASC,eAAe,SDyHpB,kBAAmBmB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMpD,c","file":"static/js/main.50ed3177.chunk.js","sourcesContent":["import React from \"react\";\nimport { createFFmpeg } from \"@ffmpeg/ffmpeg\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      videoSrc: \"\",\n      message: \"Click Start to transcode\",\n      startTime: \"00:00.000\",\n      endTime: \"04:59.999\",\n      verticalResolution: \"480\",\n    };\n  }\n\n  componentDidMount() {\n    document\n      .getElementById(\"fileOpener\")\n      .addEventListener(\"change\", this.newFileAppeared);\n\n    this.ffmpeg = createFFmpeg({\n      log: true,\n    });\n\n    this.openedFile = null;\n  }\n\n  handleStartTimeChange = (event) => {\n    this.setState({\n      startTime: event.target.value,\n    });\n  };\n\n  handleEndTimeChange = (event) => {\n    this.setState({\n      endTime: event.target.value,\n    });\n  };\n\n  handleVResChange = (event) => {\n    this.setState({\n      verticalResolution: event.target.value,\n    });\n  };\n\n  setMessage = (msg) => {\n    this.setState({\n      message: msg,\n    });\n  };\n\n  newFileAppeared = async ({ target: { files } }) => {\n    const file = files[0];\n\n    console.log(file.name ? file.name : \"No file chosen\");\n\n    this.openedFile = file;\n  };\n\n  doTranscode = async () => {\n    if (!this.openedFile) {\n      this.setMessage(\"No file selected!\");\n      return;\n    }\n    this.setMessage(\"Loading ffmpeg-core.js\");\n    await this.ffmpeg.load();\n\n    this.setMessage(\"Start transcoding\");\n\n    // const openedFileName = this.openedFile.name;\n    const openedFileName = \"foo.mkv\";\n\n    await this.ffmpeg.write(openedFileName, this.openedFile);\n    // await this.ffmpeg.transcode(\"test.avi\", \"test.mp4\");\n\n    // await this.ffmpeg.run(\"-i test.mkv -vf subtitles=test.mkv test.gif\");\n    await this.ffmpeg.run(\n      `\\\n      -ss ${this.state.startTime}\\\n      -to ${this.state.endTime}\\\n      -i ${openedFileName}\\\n      -filter_complex\\\n        \"[0:v]\\\n        scale=w=${this.state.verticalResolution}:h=-1,\\\n        split\\\n          [a][b];\\\n          [a] palettegen [p];\\\n          [b][p] paletteuse\"\\\n      test.gif\\\n      -copyts`\n    );\n\n    //      subtitles=ep1.mkv\"\\\n\n    const data = this.ffmpeg.read(\"test.gif\");\n    this.ffmpeg.remove(\"test.gif\");\n    this.setState({\n      videoSrc: URL.createObjectURL(\n        new Blob([data.buffer], { type: \"image/gif\" })\n      ),\n    });\n    this.setMessage(\"Complete transcoding\");\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <p />\n        {/* <video src={this.state.videoSrc} controls></video> */}\n        <img src={this.state.videoSrc}></img>\n        <br />\n        <input\n          type=\"text\"\n          value={this.state.startTime}\n          onChange={this.handleStartTimeChange}\n        />\n        <input\n          type=\"text\"\n          value={this.state.endTime}\n          onChange={this.handleEndTimeChange}\n        />\n        <input\n          type=\"text\"\n          value={this.state.verticalResolution}\n          onChange={this.handleVResChange}\n        />\n        <br />\n        <input type=\"file\" id=\"fileOpener\" />\n        <button onClick={this.doTranscode}>Start</button>\n        <p>{this.state.message}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}